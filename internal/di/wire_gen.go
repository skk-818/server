// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"server/internal/core/config"
	"server/internal/core/logger"
	"server/internal/core/mysql"
	router2 "server/internal/core/router"
	"server/internal/core/server"
	"server/internal/middleware"
	"server/internal/module/system/api"
	"server/internal/module/system/repo"
	"server/internal/module/system/usecase"
	"server/internal/router"
)

// Injectors from wire.go:

func InitApp() (*server.HTTPServer, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	configLogger := config.ProvideLoggerConfig(configConfig)
	zapLogger, err := logger.NewZapLogger(configLogger)
	if err != nil {
		return nil, err
	}
	httpServer := config.ProvideHttpServerConfig(configConfig)
	cors := config.ProviderCorsConfig(configConfig)
	corsMiddleware := middleware.NewCorsMiddleware(cors)
	jwt := config.ProvideJwtConfig(configConfig)
	jwtUsecase := usecase.NewJwtUsecase(jwt)
	jwtMiddleware := middleware.NewJwtMiddleware(jwtUsecase)
	configMysql := config.ProvideMysqlConfig(configConfig)
	db, err := mysql.NewMySQL(configMysql)
	if err != nil {
		return nil, err
	}
	casbinRepo := repo.NewCasbinRepo(db)
	casbinUsecase, err := usecase.NewCasbinUsecase(zapLogger, casbinRepo)
	if err != nil {
		return nil, err
	}
	casbinMiddleware := middleware.NewCasbinMiddleware(casbinUsecase)
	userRepo := repo.NewUserRepo(db)
	userUsecase := usecase.NewUserUsecase(zapLogger, userRepo)
	userApi := api.NewUserApi(configConfig, zapLogger, userUsecase)
	roleRepo := repo.NewRoleRepo(db)
	authUsecase := usecase.NewAuthUsecase(zapLogger, userRepo, roleRepo, jwtUsecase)
	authApi := api.NewAuthApi(zapLogger, authUsecase)
	roleUsecase := usecase.NewRoleUsecase(zapLogger, roleRepo)
	roleApi := api.NewRoleApi(zapLogger, roleUsecase)
	apiRepo := repo.NewApiRepo(db)
	apiUsecase := usecase.NewApiUsecase(zapLogger, apiRepo)
	apiApi := api.NewApiApi(zapLogger, apiUsecase)
	menuRepo := repo.NewMenuRepo(db)
	menuUsecase := usecase.NewMenuUsecase(zapLogger, menuRepo)
	menuApi := api.NewMenuApi(zapLogger, menuUsecase)
	systemApi := api.NewSystemApi(jwtMiddleware, casbinMiddleware, userApi, authApi, roleApi, apiApi, menuApi)
	group := router.NewGroup(zapLogger, httpServer, corsMiddleware, systemApi)
	routerRouter := router2.NewRouter(group)
	initRepo := repo.NewInitRepo(db)
	initUsecase := usecase.NewInitUsecase(zapLogger, initRepo, userRepo, roleRepo, casbinUsecase)
	serverHTTPServer := server.NewHTTPServer(routerRouter, httpServer, initUsecase)
	return serverHTTPServer, nil
}
